name: elixir-gsmlg-build-and-release
on:
  push:
    paths:
      - "elixir/gsmlg/**"
      - "elixir/gsmlg_umbrella/**"
      - ".github/workflows/elixir-gsmlg-build-and-release.yml"
    branches:
      - "main"
jobs:
  release:
    name: Create semantic release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semantic.outputs.new_release_version }}
    steps:
      - name: üõë Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v2

      - name: üöÄ Release
        uses: gsmlg/semantic-release-action@v3
        id: semantic
        with:
          release_name: gsmlg
          working-directory: 'elixir/gsmlg_umbrella'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Stop if NO NEW release
        run: |
          cat <<EOF
          Published: ${{ steps.semantic.outputs.new_release_published }}
          New Release Version: ${{ steps.semantic.outputs.new_release_version }}
          New Release Major Version: ${{ steps.semantic.outputs.new_release_major_version }}
          New Release Minor Version: ${{ steps.semantic.outputs.new_release_minor_version }}
          New Release Patch Version: ${{ steps.semantic.outputs.new_release_patch_version }}
          New Release Channel: ${{ steps.semantic.outputs.new_release_channel }}
          New Release Notes: 
          ${{ steps.semantic.outputs.new_release_notes }}
          EOF
          test -z "${{ steps.semantic.outputs.new_release_version }}" && exit 1 || exit 0

  build-docker-image:
    name: Build docker image
    runs-on: ubuntu-latest
    needs: [ release ]
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWD }}
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: elixir/gsmlg_umbrella
          file: elixir/gsmlg_umbrella/Dockerfile
          platforms: linux/amd64,linux/arm64/v8
          push: true
          build-args: |
            RELEASE_VERSION=${{ needs.release.outputs.version }}
          tags: |
            docker.io/gsmlg/gsmlg.org:v${{ needs.release.outputs.version }}
            docker.io/gsmlg/gsmlg.org:latest

  build-package:
    name: Build otp relase package
    strategy:
      matrix:
        os: 
          - runner: ubuntu-latest
            arch: x86_64
          - runner: ubuntu-arm64
            arch: arm64
    runs-on: ${{ matrix.os.runner }}
    needs: [ release ]
    steps:
      - name: ‚¨áÔ∏è Checkout repo
        uses: actions/checkout@v2

      - name: üíä Setup Elixir
        working-directory: elixir
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y elixir
          mix local.hex --force
          mix local.rebar --force
          mix archive.install hex phx_new --force

      - name: ‚öôÔ∏è Run build
        env:
          MIX_ENV: prod
          RELEASE_NAME: gsmlg_umbrella
          RELEASE_VSN: ${{ needs.release.outputs.version }}
        run: |
          cd elixir/gsmlg_umbrella
          mix do deps.get, compile
          cd apps/gsmlg_web
          npm install --prefix assets
          mix assets.deploy
          cd ../..
          curl -Lf $(npm info --json @gsmlg/website | jq -r .dist.tarball) -o website.tgz
          tar xzf website.tgz --strip-components=2 -C apps/gsmlg_web/priv/static
          mix release gsmlg_umbrella --version ${RELEASE_VSN}
          cp -r _build/prod/rel/gsmlg_umbrella gsmlg
          tar zcf gsmlg.tar.gz gsmlg

      - name: ‚¨ÜÔ∏è Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: elixir/gsmlg_umbrella/gsmlg.tar.gz
          asset_name: gsmlg_umbrella_${{ matrix.os.arch }}.tar.gz
          tag: gsmlg-v${{ needs.release.outputs.version }}
          overwrite: true
